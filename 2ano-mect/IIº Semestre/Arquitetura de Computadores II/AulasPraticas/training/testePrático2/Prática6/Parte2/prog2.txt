#include <detpic32.h>


volatile int adc_value;

//configure I/O analog input
void configureIO(){
  TRISB = TRISB & 0x80FF; //configure RB14-RB8 as output
  LATB = LATB & 0x80FF; //set initial value
 
  TRISD = TRISD & 0xF9FF;  //configure RD6-RD5 as output
  LATD = LATD & 0xF9FF; //set initial value
}
//configure A/D module
void configureAD(){
 TRISBbits.TRISB4 = 1;  // Step 1A - RB4 digital output disconnected
    AD1PCFGbits.PCFG4 = 0; // Step 1B - RB4 configured as analog input (AN4)

    AD1CHSbits.CH0SA = 4; // Step 2  - Desired input analog channel (0 to 15)

    AD1CON2bits.SMPI = 0; // Step 3  - 1 samples will be converted and stored
                          // in buffer locations ADC1BUF0 to ADC1BUF3

    AD1CON1bits.SSRC = 7; // Step 4  - Conversion trigger selection bits: in
                          // this mode an internal counter ends sampling and
                          // starts conversion

    AD1CON1bits.CLRASAM = 1; // Step 5 - Stop conversions when the 1st A/D
                             // converter interrupt is generated. At the same
                             // time, hardware clears the ASAM bit

    AD1CON3bits.SAMC = 16; // Step 6 - Sample time is 16 TAD (TAD = 100 ns)

    AD1CON1bits.ON = 1; // Step 7 (see Page 4) - Enable A/D converter
                        // This must the last command of the A/D
                        // configuration sequence

}
//configure Interrupts System
void configInterrupSys(){
  IPC6bits.AD1IP = 2; //configure priority
  IFS1bits.AD1IF = 0; //clear A/D
  IEC1bits.AD1IE = 1; //enable A/D
}
void delay(int ms){
  for(; ms > 0; ms--){
     resetCoreTimer();
     while(readCoreTimer() < 20000);
}
}
//Interrupt Handler
void _int_(27) isr_adc(void){
  //print value in hexadecimal format

  adc_value = ADC1BUF0; 
  printInts(adc_value, 16 | 3 << 16);
  //delay(100); // 10Hz -->  opticional this part
  putChar(' ');
  LATEbits.LATE = 1; //set RE0

  AD1CON1bits.ASAM = 1; //start conversion

 IFS1bits.AD1IF = 0; //reset AD1IF flag

}
int main(void){
  configureIO();
  configureAD();
  configInterruptSys();
  
 EnableInterrupts();//enable global interrupt

 AD1CON1bits.ASAM = 1; //start conversion

 while(1){
  LATEbits.LATE = 0; //reset RE0
 }

  return 0;
}