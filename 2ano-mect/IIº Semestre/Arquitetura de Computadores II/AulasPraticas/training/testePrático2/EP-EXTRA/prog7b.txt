#include <detpic32.h>

 volatile int voltage = 0;
 volatile int freq = 0;

void delay(int ms){
 for(; ms > 0; ms--){
     resetCoreTimer();
     while(readCoreTimer() < 20000);
  }
}
void configADC(){
  TRISBbits.TRIB4 = 1;
  TRISBbits.TRISBx = 1;
 AD1PCFGbits.PCFGx= 0;
 AD1CON1bits.SSRC = 7; 
 AD1CON1bits.CLRASAM = 1; 
 AD1CON3bits.SAMC = 16;  
 AD1CON2bits.SMPI = 4-1; 
 AD1CHSbits.CH0SA = 4; 
 AD1CON1bits.ON = 1; // Enable A/D converter

 IPC6bits.AD1IP = 2; // configure priority of A/D interrupts
 FS1bits.AD1IF = 0; // clear A/D interrupt flag 
 IECbits.AD1IE = 1; // enable A/D interrupts 
 
}
void _int_(27) isr_adc(void){
   int sum = 0;
   int *p = (int *)(&ADC1BUF0);
   for(int i = 0; i < 4; i++){
      int value = p[i*4];
         sum += value;
   }
     double avg = (double)sum/4.0;
        voltage = (char)(avg*33)/1023;
   IFS0bits.AD1IF = 0;
} 
int main(void){
  
  printStr("Preparation for PT2 - AC2\n");

  TRISB = (TRISB & 0xFFF0) | 0x000F; //configure RB3-RB0 as output
   
  configADC();
  EnableInterrupts();//enable global interrupt

 while(1){
   
  AD1CON1bits.ASAM = 1;//start conversion

  printStr("\nValor dos interruptores: ");

  printInt(PORTBbits.RB0, 2);
  printInt(PORTBbits.RB1, 2);
  printInt(PORTBbits.RB2, 2);
  printInt(PORTBbits.RB3, 2);
  
  freq = 1 + (voltage/255)
  delay(1000/freq); 
  }
  
 return 0;
